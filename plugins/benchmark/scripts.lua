-- This is an example of a benchmark
-- It's composed of a table with 4 columns (id, level, stage, result)
-- This code can be written into a file named scripts/benchmark.lua

-- local Benchmark = {}
--
-- -- Create and ...
-- local function prepareDatabase()
--     SQL.createdatabase('db/benchmark.db')
-- end
--
-- -- ... fill the database
-- local function writeEntries()
--     SQL.opendatabase('db/benchmark.db')
--     SQL.writecommand('CREATE TABLE benchmark ('
--         .. 'id int PRIMARY KEY,'
--         .. 'level int,'
--         .. 'stage int,'
--         .. 'result int'
--         .. ')'
--     )
--     SQL.writecommand('INSERT INTO benchmark VALUES (1, 1, 1, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (2, 1, 2, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (3, 1, 3, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (4, 2, 1, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (5, 2, 2, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (6, 2, 3, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (7, 3, 1, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (8, 3, 2, 0)')
--     SQL.writecommand('INSERT INTO benchmark VALUES (9, 3, 3, 0)')
-- end
--
-- -- Get the next one to treat
-- local function retrieveNext()
--     SQL.opendatabase('db/benchmark.db')
--     local nextBenchmark = SQL.readcommand(
--         'SELECT id, level, stage FROM benchmark WHERE result = 0 ORDER BY level asc, stage asc LIMIT 1'
--     )
--
--     if not nextBenchmark['id 0'] then
--         return nil
--     end
--
--     return {
--         ['id'] = nextBenchmark['id 0'],
--         ['level'] = nextBenchmark['level 0'],
--         ['stage'] = nextBenchmark['stage 0'],
--     }
-- end
--
-- Benchmark.prepareDatabase = prepareDatabase
-- Benchmark.retrieveNext = retrieveNext
-- Benchmark.writeEntries = writeEntries
--
-- return Benchmark